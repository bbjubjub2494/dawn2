// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.202.5/containers/rust
{
    "name": "Rust",
    "build": {
        "dockerfile": "Dockerfile",
        "args": {
            // Use the VARIANT arg to pick a Debian OS version: buster, bullseye
            // Use bullseye when on local on arm64/Apple Silicon.
            "VARIANT": "bullseye"
        }
    },
    // Passes the --init flag when creating the dev container.
    "init": true,
    // Passes docker capabilities to include when creating the dev container.
    "capAdd": ["SYS_PTRACE"],
    // Passes docker security options to include when creating the dev container.
    "securityOpt": [
        "seccomp=unconfined",
        "label=disable"
    ],

    // Use 'postCreateCommand' to run commands after the container is created.
    "postCreateCommand": "pre-commit install --install-hooks",

    // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
    "remoteUser": "root",
    "containerUser": "root",

    // Host hardware requirements.
    "hostRequirements": {
        "cpus": 4
    },

    // Features to add to the dev container.
    // https://containers.dev/features
    "features": {
        "ghcr.io/devcontainers/features/git:1": {
            "version": "latest"
        },
        "ghcr.io/devcontainers/features/github-cli:1": {
            "version": "latest"
        },
        "ghcr.io/meaningful-ooo/devcontainer-features/fish:1": {
            "version": "latest"
        }
    },

    "customizations": {
        // Configure properties specific to VS Code.
        "vscode": {
            // Set *default* container specific settings.json values on container create.
            "settings": {
                "lldb.executable": "/usr/bin/lldb",
                // VS Code don't watch files under ./target
                "files.watcherExclude": {
                    "**/target/**": true
                },

                // List of features to activate. Set this to "all" to pass --all-features to cargo.
                "rust-analyzer.cargo.features": "all",
                // Cargo command to use for cargo check.
                "rust-analyzer.checkOnSave.command": "clippy",
                // Check all targets and tests (--all-targets).
                "rust-analyzer.checkOnSave.allTargets": true,
                // The path structure for newly inserted paths to use.
                //
                // self: Insert import paths relative to the current module, using up to one `super` prefix
                // if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.
                "rust-analyzer.imports.prefix": "self",
                // How imports should be grouped into use statements.
                // module: Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.
                "rust-analyzer.imports.granularity.group": "crate",
                // Group inserted imports by the following order. Groups are separated by newlines.
                "rust-analyzer.imports.group.enable": false,
                // Prefer to unconditionally use imports of the core and alloc crate, over the std crate.
                "rust-analyzer.imports.prefer.no.std": true
            },
            // Add the IDs of extensions you want installed when the container is created.
            "extensions": [
                "cschleiden.vscode-github-actions",
                "github.codespaces",
                "github.vscode-pull-request-github",
                "rust-lang.rust-analyzer",
                "redhat.vscode-yaml",
                "tamasfe.even-better-toml",
                "vadimcn.vscode-lldb"
            ]
        }
    }
}
